// src/index.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

// --- –ò–º–ø–æ—Ä—Ç—ã ---
import { Telegraf, Context } from 'telegraf';
import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';

// --- –¢–∏–ø—ã ---
interface TelegramContext extends Context {
  from: NonNullable<Context['from']>;
}
type QuizAnswers = { [key: string]: any };

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
dotenv.config();
const prisma = new PrismaClient();
const botToken = process.env.BOT_TOKEN;
const ADMIN_USERNAME = process.env.ADMIN_USERNAME;
const ADMIN_TELEGRAM_ID_FOR_NOTIFY = process.env.ADMIN_TELEGRAM_ID_FOR_NOTIFY;

if (!botToken || !ADMIN_USERNAME || !ADMIN_TELEGRAM_ID_FOR_NOTIFY) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (BOT_TOKEN, ADMIN_USERNAME, ADMIN_TELEGRAM_ID_FOR_NOTIFY) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env!");
  process.exit(1);
}

const bot = new Telegraf<TelegramContext>(botToken);

// --- –•–µ–ª–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ ---
const isAdmin = (username?: string) => username === ADMIN_USERNAME;

// --- –°–¢–ê–†–¢–û–í–û–ï –ú–ï–ù–Æ ---
bot.start(async (ctx) => {
  try {
    const telegramUser = ctx.from;
    const userInDb = await prisma.user.upsert({
      where: { telegram_id: telegramUser.id },
      update: { username: telegramUser.username, first_name: telegramUser.first_name },
      create: {
        telegram_id: telegramUser.id,
        username: telegramUser.username,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name,
        language_code: telegramUser.language_code,
      },
    });
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${userInDb.first_name}! üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'start_quiz' }],
            [{ text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã', callback_data: 'view_portfolio' }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    ctx.reply('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
});

// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
bot.action('view_portfolio', (ctx) => {
  ctx.reply(`üì± –ù–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: https://–≤–∞—à-—Å–∞–π—Ç.ru`, {
    reply_markup: { inline_keyboard: [[{ text: 'üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'start_quiz' }]]}
  });
});
bot.action('start_quiz', (ctx) => {
  ctx.reply(`‚öñÔ∏è –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.`, {
    reply_markup: { inline_keyboard: [[{ text: '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'consent_agree' }]]}
  });
});

// --- –õ–û–ì–ò–ö–ê –ö–í–ò–ó–ê ---
bot.action('consent_agree', async (ctx) => {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    await prisma.quizSession.create({
      data: { user_id: user.id, current_step: 1, answers: {} }
    });
    await sendQuestion1(ctx);
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∫–≤–∏–∑–∞:', error); }
});
async function saveAnswerAndNext(ctx: TelegramContext, field: string, value: any, nextFunction: (ctx: TelegramContext) => Promise<void>) {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const session = await prisma.quizSession.findFirst({
      where: { user_id: user.id, is_completed: false },
      orderBy: { created_at: 'desc' }
    });
    if (!session) throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    const currentAnswers = (session.answers as QuizAnswers) || {};
    const updatedAnswers = { ...currentAnswers, [field]: value };
    await prisma.quizSession.update({
      where: { id: session.id },
      data: { answers: updatedAnswers, current_step: (session.current_step || 0) + 1 }
    });
    await nextFunction(ctx);
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error); }
}

// --- –í–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞ ---
async function sendQuestion1(ctx: TelegramContext) {
  await ctx.reply(`‚ùì 1/3: –ö–∞–∫–æ–π —Å–∞–π—Ç –≤–∞–º –Ω—É–∂–µ–Ω?`, { reply_markup: { inline_keyboard: [[{ text: 'üìÑ –õ–µ–Ω–¥–∏–Ω–≥', callback_data: 'q1_landing' }], [{ text: 'üõí –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'q1_shop' }]]}});
}
bot.action('q1_landing', (ctx) => saveAnswerAndNext(ctx, 'site_type', '–õ–µ–Ω–¥–∏–Ω–≥', sendQuestion2));
bot.action('q1_shop', (ctx) => saveAnswerAndNext(ctx, 'site_type', '–ú–∞–≥–∞–∑–∏–Ω', sendQuestion2));
async function sendQuestion2(ctx: TelegramContext) {
  await ctx.reply(`‚ùì 2/3: –í –∫–∞–∫–æ–π –Ω–∏—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?`, { reply_markup: { inline_keyboard: [[{ text: '‚öôÔ∏è –£—Å–ª—É–≥–∏', callback_data: 'q2_services' }], [{ text: '‚úèÔ∏è –î—Ä—É–≥–æ–µ', callback_data: 'q2_other' }]]}});
}
bot.action('q2_services', (ctx) => saveAnswerAndNext(ctx, 'niche', '–£—Å–ª—É–≥–∏', sendQuestion3));
bot.action('q2_other', (ctx) => ctx.reply('‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –Ω–∏—à—É —Ç–µ–∫—Å—Ç–æ–º:'));
async function sendQuestion3(ctx: TelegramContext) {
  await ctx.reply(`‚ùì 3/3: –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n\nüìõ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`);
}

// –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê
bot.on('text', async (ctx) => {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) return;
    const session = await prisma.quizSession.findFirst({
      where: { user_id: user.id, is_completed: false },
      orderBy: { created_at: 'desc' }
    });
    if (!session || !('text' in ctx.message)) return;
    const currentAnswers = (session.answers as any) || {};
    if (session.current_step === 2 && !currentAnswers.niche) {
      await saveAnswerAndNext(ctx, 'niche', ctx.message.text, sendQuestion3);
      return;
    }
    if (session.current_step === 3) {
      if (!currentAnswers.contacts) {
        currentAnswers.contacts = { name: ctx.message.text };
        await prisma.quizSession.update({ where: { id: session.id }, data: { answers: currentAnswers }});
        await ctx.reply('üì± –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');
      } else if (!currentAnswers.contacts.phone) {
        currentAnswers.contacts.phone = ctx.message.text;
        await prisma.quizSession.update({ where: { id: session.id }, data: { answers: currentAnswers, is_completed: true } });
        const application = await prisma.application.create({
          data: {
            user_id: user.id,
            status: 'new',
            answers: currentAnswers,
            contact_info: `${currentAnswers.contacts.name}, ${currentAnswers.contacts.phone}`,
          },
          include: { user: true }
        });
        console.log('–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
        await notifyAdminNewApplication(application);
        await ctx.reply(`üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.`);
      }
    }
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error); }
});

// --- –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ---
bot.command('admin', async (ctx) => {
  try {
    if (!isAdmin(ctx.from.username)) { await ctx.reply(`‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω.`); return; }
    await ctx.reply(`üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
          [{ text: 'üìù –ó–∞—è–≤–∫–∏', callback_data: 'admin_applications' }]
        ]
      }
    });
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –≤ /admin:', error); }
});
bot.action('admin_stats', async (ctx) => {
  try {
    if (!isAdmin(ctx.from.username)) return;
    const totalUsers = await prisma.user.count();
    const totalApplications = await prisma.application.count();
    const newApplications = await prisma.application.count({ where: { status: 'new' } });
    await ctx.editMessageText(
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
      `üìù –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${totalApplications}\n` +
      `üÜï –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: ${newApplications}`,
      { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_main' }]]}}
    );
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –≤ admin_stats:', error); }
});
bot.action('admin_applications', async (ctx) => {
  try {
    if (!isAdmin(ctx.from.username)) return;
    const applications = await prisma.application.findMany({
      take: 5,
      orderBy: { created_at: 'desc' },
      include: { user: { select: { first_name: true, username: true } } }
    });
    if (applications.length === 0) {
      await ctx.editMessageText('üìù –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.', { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_main' }]]}});
      return;
    }
    let message = `üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${applications.length} –∑–∞—è–≤–æ–∫:\n\n`;
    applications.forEach((app: any, index: number) => {
      const answers = app.answers as any;
      const user = app.user;
      const date = app.created_at ? new Date(app.created_at).toLocaleDateString('ru-RU') : '?';
      message += `${index + 1}. ${user.first_name} (@${user.username || '?'})\n`;
      message += `üìÖ ${date} | üìä ${app.status}\n\n`;
    });
    await ctx.editMessageText(message, { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_main' }]]}});
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error); }
});
bot.action('admin_main', async (ctx) => {
  if (!isAdmin(ctx.from.username)) return;
  await ctx.editMessageText(`üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
        [{ text: 'üìù –ó–∞—è–≤–∫–∏', callback_data: 'admin_applications' }]
      ]
    }
  });
});
async function notifyAdminNewApplication(application: any) {
  try {
    const { user, answers } = application;
    const contact = answers.contacts || {};
    const message = 
      `üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n\n` +
      `üë§ –ö–ª–∏–µ–Ω—Ç: ${user.first_name || '–ê–Ω–æ–Ω–∏–º'} (@${user.username || '?'})\n` +
      `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${contact.name}, ${contact.phone}\n` +
      `üè¢ –¢–∏–ø —Å–∞–π—Ç–∞: ${answers.site_type || '?'}\n` +
      `üéØ –ù–∏—à–∞: ${answers.niche || '?'}`;
    if (ADMIN_TELEGRAM_ID_FOR_NOTIFY) {
        await bot.telegram.sendMessage(ADMIN_TELEGRAM_ID_FOR_NOTIFY, message);
    }
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error); }
}

// --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
bot.launch();
console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));