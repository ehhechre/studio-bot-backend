// src/index.ts

// --- –ò–º–ø–æ—Ä—Ç—ã ---
import { Telegraf, Context } from 'telegraf';
import dotenv from 'dotenv';
import { PrismaClient, Prisma } from '@prisma/client';

// --- –¢–∏–ø—ã –¥–ª—è –∫–≤–∏–∑–∞ ---
interface QuizAnswers {
  step1_site_type?: string;
  step2_niche?: string;
  step3_branding?: string;
  step4_tasks?: string[];
  step5_pages?: string[];
  step6_contacts?: {
    name?: string;
    phone?: string;
    email?: string;
    comment?: string;
  };
}

interface TelegramContext extends Context {
  from: NonNullable<Context['from']>;
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
dotenv.config();
const prisma = new PrismaClient();
const botToken = process.env.BOT_TOKEN;

if (!botToken) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!");
  process.exit(1);
}

const bot = new Telegraf(botToken);

// --- –°–¢–ê–†–¢–û–í–û–ï –ú–ï–ù–Æ ---
bot.start(async (ctx: TelegramContext) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from);
    
    const telegramUser = ctx.from;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userInDb = await prisma.user.upsert({
      where: { telegram_id: telegramUser.id },
      update: {
        username: telegramUser.username,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name,
      },
      create: {
        telegram_id: telegramUser.id,
        username: telegramUser.username,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name,
        language_code: telegramUser.language_code,
      },
    });

    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:', userInDb);

    // –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${userInDb.first_name}! üöÄ\n\n` +
      `–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∞–π—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'start_quiz' },
              { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã', callback_data: 'view_portfolio' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    ctx.reply('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
});

// --- –ü–û–†–¢–§–û–õ–ò–û ---
bot.action('view_portfolio', async (ctx: TelegramContext) => {
  try {
    await ctx.answerCbQuery();
    await ctx.reply(
      `üì± –ù–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: https://–≤–∞—à-—Å–∞–π—Ç.ru\n` +
      `üî• –ë–æ–ª–µ–µ 100 —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n` +
      `–ì–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç?`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'start_quiz' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:', error);
  }
});

// --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---
bot.action('main_menu', async (ctx: TelegramContext) => {
  try {
    await ctx.answerCbQuery();
    const user = await prisma.user.findUnique({
      where: { telegram_id: ctx.from.id }
    });
    
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${user?.first_name}! üöÄ\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'start_quiz' },
              { text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã', callback_data: 'view_portfolio' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:', error);
  }
});

// --- –°–û–ì–õ–ê–°–ò–ï –ù–ê –û–ë–†–ê–ë–û–¢–ö–£ –î–ê–ù–ù–´–• ---
bot.action('start_quiz', async (ctx: TelegramContext) => {
  try {
    await ctx.answerCbQuery();
    await ctx.reply(
      `üìã –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n` +
      `‚öñÔ∏è –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'consent_agree' },
              { text: '‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'consent_decline' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Å–æ–≥–ª–∞—Å–∏–∏:', error);
  }
});

// --- –û–¢–ö–ê–ó –û–¢ –°–û–ì–õ–ê–°–ò–Ø ---
bot.action('consent_decline', async (ctx: TelegramContext) => {
  try {
    await ctx.answerCbQuery();
    await ctx.reply(
      `üòî –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n\n` +
      `–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è!`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ—Ç–∫–∞–∑–µ:', error);
  }
});

// --- –ù–ê–ß–ê–õ–û –ö–í–ò–ó–ê ---
bot.action('consent_agree', async (ctx: TelegramContext) => {
  try {
    await ctx.answerCbQuery();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∫–≤–∏–∑–∞
    const user = await prisma.user.findUnique({
      where: { telegram_id: ctx.from.id }
    });
    
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const quizSession = await prisma.quizSession.create({
      data: {
        user_id: user.id,
        current_step: 1,
        answers: {} as Prisma.JsonObject,
        started_at: new Date(),
        quiz_type: 'website_brief'
      }
    });

    console.log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∫–≤–∏–∑–∞:', quizSession.id);
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await sendQuestion1(ctx);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∫–≤–∏–∑–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// --- –í–û–ü–†–û–° 1: –¢–ò–ü –°–ê–ô–¢–ê ---
async function sendQuestion1(ctx: TelegramContext): Promise<void> {
  await ctx.reply(
    `‚ùì –í–æ–ø—Ä–æ—Å 1 –∏–∑ 6\n\n` +
    `–ö–∞–∫–æ–π —Å–∞–π—Ç –≤–∞–º –Ω—É–∂–µ–Ω?`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìÑ –õ–µ–Ω–¥–∏–Ω–≥', callback_data: 'q1_landing' }],
          [{ text: 'üìö –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç', callback_data: 'q1_multipage' }],
          [{ text: 'üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', callback_data: 'q1_shop' }],
          [{ text: '‚ùì –ù–µ –∑–Ω–∞—é ‚Äî –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', callback_data: 'q1_consultation' }]
        ]
      }
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å 1
bot.action('q1_landing', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step1_site_type', '–õ–µ–Ω–¥–∏–Ω–≥', sendQuestion2);
});

bot.action('q1_multipage', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step1_site_type', '–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç', sendQuestion2);
});

bot.action('q1_shop', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step1_site_type', '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', sendQuestion2);
});

bot.action('q1_consultation', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step1_site_type', '–ù–µ –∑–Ω–∞—é ‚Äî –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', sendQuestion2);
});

// --- –í–û–ü–†–û–° 2: –ù–ò–®–ê ---
async function sendQuestion2(ctx: TelegramContext): Promise<void> {
  await ctx.reply(
    `‚ùì –í–æ–ø—Ä–æ—Å 2 –∏–∑ 6\n\n` +
    `–í –∫–∞–∫–æ–π –Ω–∏—à–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚öôÔ∏è –£—Å–ª—É–≥–∏', callback_data: 'q2_services' }],
          [{ text: 'üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', callback_data: 'q2_education' }],
          [{ text: 'üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', callback_data: 'q2_construction' }],
          [{ text: 'üíÑ –ö—Ä–∞—Å–æ—Ç–∞/–º–æ–¥–∞', callback_data: 'q2_beauty' }],
          [{ text: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', callback_data: 'q2_realestate' }],
          [{ text: '‚úèÔ∏è –î—Ä—É–≥–æ–µ', callback_data: 'q2_other' }]
        ]
      }
    }
  );
}

bot.action('q2_services', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step2_niche', '–£—Å–ª—É–≥–∏', sendQuestion3);
});

bot.action('q2_education', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step2_niche', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', sendQuestion3);
});

bot.action('q2_construction', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step2_niche', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', sendQuestion3);
});

bot.action('q2_beauty', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step2_niche', '–ö—Ä–∞—Å–æ—Ç–∞/–º–æ–¥–∞', sendQuestion3);
});

bot.action('q2_realestate', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step2_niche', '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', sendQuestion3);
});

bot.action('q2_other', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await ctx.reply('‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –Ω–∏—à—É —Ç–µ–∫—Å—Ç–æ–º:');
  // –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ bot.on('text')
});

// --- –í–û–ü–†–û–° 3: –§–ò–†–ú–ï–ù–ù–´–ô –°–¢–ò–õ–¨ ---
async function sendQuestion3(ctx: TelegramContext): Promise<void> {
  await ctx.reply(
    `‚ùì –í–æ–ø—Ä–æ—Å 3 –∏–∑ 6\n\n` +
    `–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø?`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –î–∞, –≤—Å—ë –≥–æ—Ç–æ–≤–æ', callback_data: 'q3_ready' }],
          [{ text: 'üîÑ –ß–∞—Å—Ç–∏—á–Ω–æ', callback_data: 'q3_partial' }],
          [{ text: 'üÜï –ù–µ—Ç, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è', callback_data: 'q3_new' }]
        ]
      }
    }
  );
}

bot.action('q3_ready', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step3_branding', '–î–∞, –≤—Å—ë –≥–æ—Ç–æ–≤–æ', sendQuestion4);
});

bot.action('q3_partial', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step3_branding', '–ß–∞—Å—Ç–∏—á–Ω–æ', sendQuestion4);
});

bot.action('q3_new', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step3_branding', '–ù–µ—Ç, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è', sendQuestion4);
});

// --- –í–û–ü–†–û–° 4: –ó–ê–î–ê–ß–ò –°–ê–ô–¢–ê ---
async function sendQuestion4(ctx: TelegramContext): Promise<void> {
  await ctx.reply(
    `‚ùì –í–æ–ø—Ä–æ—Å 4 –∏–∑ 6\n\n` +
    `–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å —Å–∞–π—Ç? (–≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é)`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üë• –ü—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data: 'q4_clients' }],
          [{ text: 'üí∞ –ü—Ä–æ–¥–∞–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω', callback_data: 'q4_sales' }],
          [{ text: 'üè¢ –£–∫—Ä–µ–ø–ª—è—Ç—å –±—Ä–µ–Ω–¥', callback_data: 'q4_brand' }],
          [{ text: 'üìñ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –∫–æ–º–ø–∞–Ω–∏–∏', callback_data: 'q4_about' }]
        ]
      }
    }
  );
}

bot.action('q4_clients', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step4_tasks', ['–ü—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤'], sendQuestion5);
});

bot.action('q4_sales', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step4_tasks', ['–ü—Ä–æ–¥–∞–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω'], sendQuestion5);
});

bot.action('q4_brand', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step4_tasks', ['–£–∫—Ä–µ–ø–ª—è—Ç—å –±—Ä–µ–Ω–¥'], sendQuestion5);
});

bot.action('q4_about', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step4_tasks', ['–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –∫–æ–º–ø–∞–Ω–∏–∏'], sendQuestion5);
});

// --- –í–û–ü–†–û–° 5: –°–¢–†–ê–ù–ò–¶–´ ---
async function sendQuestion5(ctx: TelegramContext): Promise<void> {
  await ctx.reply(
    `‚ùì –í–æ–ø—Ä–æ—Å 5 –∏–∑ 6\n\n` +
    `–ö–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞–º —Ç–æ—á–Ω–æ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è? (–≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ)`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–∞—è + –û –∫–æ–º–ø–∞–Ω–∏–∏', callback_data: 'q5_basic' }],
          [{ text: '‚öôÔ∏è + –£—Å–ª—É–≥–∏', callback_data: 'q5_services' }],
          [{ text: 'üíº + –ö–µ–π—Å—ã/–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', callback_data: 'q5_cases' }],
          [{ text: 'üìû + –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'q5_contacts' }]
        ]
      }
    }
  );
}

bot.action('q5_basic', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step5_pages', ['–ì–ª–∞–≤–Ω–∞—è', '–û –∫–æ–º–ø–∞–Ω–∏–∏'], sendQuestion6);
});

bot.action('q5_services', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step5_pages', ['–ì–ª–∞–≤–Ω–∞—è', '–û –∫–æ–º–ø–∞–Ω–∏–∏', '–£—Å–ª—É–≥–∏'], sendQuestion6);
});

bot.action('q5_cases', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step5_pages', ['–ì–ª–∞–≤–Ω–∞—è', '–û –∫–æ–º–ø–∞–Ω–∏–∏', '–£—Å–ª—É–≥–∏', '–ö–µ–π—Å—ã'], sendQuestion6);
});

bot.action('q5_contacts', async (ctx: TelegramContext) => {
  await ctx.answerCbQuery();
  await saveAnswerAndNext(ctx, 'step5_pages', ['–ì–ª–∞–≤–Ω–∞—è', '–û –∫–æ–º–ø–∞–Ω–∏–∏', '–£—Å–ª—É–≥–∏', '–ö–æ–Ω—Ç–∞–∫—Ç—ã'], sendQuestion6);
});

// --- –í–û–ü–†–û–° 6: –ö–û–ù–¢–ê–ö–¢–´ ---
async function sendQuestion6(ctx: TelegramContext): Promise<void> {
  await ctx.reply(
    `‚ùì –í–æ–ø—Ä–æ—Å 6 –∏–∑ 6\n\n` +
    `–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n\n` +
    `üìõ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`
  );
}

// --- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø ---
async function saveAnswerAndNext(
  ctx: TelegramContext, 
  field: keyof QuizAnswers, 
  value: any, 
  nextFunction: (ctx: TelegramContext) => Promise<void>
): Promise<void> {
  try {
    const user = await prisma.user.findUnique({
      where: { telegram_id: ctx.from.id }
    });

    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∫–≤–∏–∑–∞
    const session = await prisma.quizSession.findFirst({
      where: {
        user_id: user.id,
        is_completed: false
      },
      orderBy: { created_at: 'desc' }
    });

    if (!session) {
      throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∫–≤–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    const currentAnswers = (session.answers as QuizAnswers) || {};
    const updatedAnswers: QuizAnswers = { ...currentAnswers, [field]: value };

    await prisma.quizSession.update({
      where: { id: session.id },
      data: {
        answers: updatedAnswers as Prisma.JsonObject,
        current_step: (session.current_step || 0) + 1,
        updated_at: new Date()
      }
    });

    console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç ${field}:`, value);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await nextFunction(ctx);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// --- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (–î–õ–Ø –ö–û–ù–¢–ê–ö–¢–û–í) ---
bot.on('text', async (ctx: TelegramContext) => {
  try {
    const user = await prisma.user.findUnique({
      where: { telegram_id: ctx.from.id }
    });

    if (!user) return;

    const session = await prisma.quizSession.findFirst({
      where: {
        user_id: user.id,
        is_completed: false
      },
      orderBy: { created_at: 'desc' }
    });

    if (!session || !ctx.message || !('text' in ctx.message)) return;

    const currentAnswers = (session.answers as QuizAnswers) || {};
    
    // –ï—Å–ª–∏ –º—ã –Ω–∞ 6 —à–∞–≥–µ (–∫–æ–Ω—Ç–∞–∫—Ç—ã)
    if (session.current_step === 6) {
      if (!currentAnswers.step6_contacts) {
        // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–º—è
        currentAnswers.step6_contacts = { name: ctx.message.text };
        
        await prisma.quizSession.update({
          where: { id: session.id },
          data: { answers: currentAnswers as Prisma.JsonObject }
        });
        
        await ctx.reply('üì± –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');
        
      } else if (!currentAnswers.step6_contacts.phone) {
        // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–µ–ª–µ—Ñ–æ–Ω
        currentAnswers.step6_contacts.phone = ctx.message.text;
        
        await prisma.quizSession.update({
          where: { id: session.id },
          data: { answers: currentAnswers as Prisma.JsonObject }
        });
        
        await ctx.reply('üìß –ò –≤–∞—à email:');
        
      } else if (!currentAnswers.step6_contacts.email) {
        // –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - email
        currentAnswers.step6_contacts.email = ctx.message.text;
        
        await prisma.quizSession.update({
          where: { id: session.id },
          data: { answers: currentAnswers as Prisma.JsonObject }
        });
        
        await ctx.reply('‚úçÔ∏è –ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏? (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç")');
        
      } else {
        // –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        currentAnswers.step6_contacts.comment = ctx.message.text === '–Ω–µ—Ç' ? '' : ctx.message.text;
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
        const completedAt = new Date();
        const startedAt = session.started_at || session.created_at || new Date();
        const completionTime = Math.round((completedAt.getTime() - startedAt.getTime()) / (1000 * 60));
        
        await prisma.quizSession.update({
          where: { id: session.id },
          data: {
            answers: currentAnswers as Prisma.JsonObject,
            is_completed: true,
            completed_at: completedAt,
            completion_time_minutes: completionTime,
            current_step: 7
          }
        });
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        await prisma.application.create({
          data: {
            user_id: user.id,
            status: 'new',
            answers: currentAnswers as Prisma.JsonObject,
            contact_info: `${currentAnswers.step6_contacts.name}, ${currentAnswers.step6_contacts.phone}, ${currentAnswers.step6_contacts.email}`,
            source: 'telegram_bot'
          }
        });
        
        console.log('–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
        
        await ctx.reply(
          `üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n` +
          `‚è± –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ${completionTime} –º–∏–Ω\n\n` +
          `üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n` +
          `–ü–æ–∫–∞ –∂–¥–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ä–∞–±–æ—Ç—ã:`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', callback_data: 'view_portfolio' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
              ]
            }
          }
        );
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–¥—Ä—É–≥–æ–µ" –¥–ª—è –Ω–∏—à–∏
    if (session.current_step === 2 && !currentAnswers.step2_niche) {
      await saveAnswerAndNext(ctx, 'step2_niche', ctx.message.text, sendQuestion3);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
  }
});
// –î–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–≤–∏–∑–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∫–≤–∏–∑–µ
bot.action(/^back_to_step_(\d+)$/, async (ctx: TelegramContext) => {
    try {
      await ctx.answerCbQuery();
      
      const stepNumber = parseInt(ctx.match![1]);
      const userId = ctx.from.id;
      
      // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∫–≤–∏–∑–∞
      const quizSession = await prisma.quizSession.findFirst({
        where: {
          user_id: userId,
          is_completed: false
        }
      });
  
      if (!quizSession) {
        await ctx.reply('‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∫–≤–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start');
        return;
      }
  
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
      await prisma.quizSession.update({
        where: { id: quizSession.id },
        data: { current_step: stepNumber }
      });
  
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
      switch (stepNumber) {
        case 1:
          await showStep1Question(ctx, quizSession.id);
          break;
        case 2:
          await showStep2Question(ctx, quizSession.id);
          break;
        case 3:
          await showStep3Question(ctx, quizSession.id);
          break;
        case 4:
          await showStep4Question(ctx, quizSession.id);
          break;
        case 5:
          await showStep5Question(ctx, quizSession.id);
          break;
        default:
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥ –∫–≤–∏–∑–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —à–∞–≥—É:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  });
  
  // –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" (–ø—Ä–∏–º–µ—Ä—ã)
  async function showStep1Question(ctx: TelegramContext, sessionId: string) {
    await ctx.editMessageText(
      "üè¢ –®–∞–≥ 1 –∏–∑ 6\n\n" +
      "–ö–∞–∫–æ–π —Ç–∏–ø —Å–∞–π—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω?",
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üõç –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω", callback_data: `quiz_${sessionId}_step1_shop` },
              { text: "üìÑ –°–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞", callback_data: `quiz_${sessionId}_step1_business_card` }
            ],
            [
              { text: "üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data: `quiz_${sessionId}_step1_portfolio` },
              { text: "üì∞ –ë–ª–æ–≥/–°–ú–ò", callback_data: `quiz_${sessionId}_step1_blog` }
            ],
            [
              { text: "üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π", callback_data: `quiz_${sessionId}_step1_corporate` },
              { text: "üîß –î—Ä—É–≥–æ–µ", callback_data: `quiz_${sessionId}_step1_other` }
            ]
          ]
        }
      }
    );
  }
  
  async function showStep2Question(ctx: TelegramContext, sessionId: string) {
    await ctx.editMessageText(
      "üéØ –®–∞–≥ 2 –∏–∑ 6\n\n" +
      "–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤–∞—à –±–∏–∑–Ω–µ—Å?",
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üõí –¢–æ—Ä–≥–æ–≤–ª—è", callback_data: `quiz_${sessionId}_step2_trade` },
              { text: "üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω/–ö–∞—Ñ–µ", callback_data: `quiz_${sessionId}_step2_restaurant` }
            ],
            [
              { text: "üíÖ –ö—Ä–∞—Å–æ—Ç–∞/–ó–¥–æ—Ä–æ–≤—å–µ", callback_data: `quiz_${sessionId}_step2_beauty` },
              { text: "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", callback_data: `quiz_${sessionId}_step2_realty` }
            ],
            [
              { text: "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data: `quiz_${sessionId}_step2_education` },
              { text: "üîß –£—Å–ª—É–≥–∏", callback_data: `quiz_${sessionId}_step2_services` }
            ],
            [
              { text: "üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", callback_data: `quiz_${sessionId}_step2_production` },
              { text: "üì± IT/–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data: `quiz_${sessionId}_step2_it` }
            ],
            [
              { text: "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", callback_data: `quiz_${sessionId}_step2_creative` },
              { text: "üîÑ –î—Ä—É–≥–æ–µ", callback_data: `quiz_${sessionId}_step2_other` }
            ],
            [
              { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_step_1" }
            ]
          ]
        }
      }
    );
  }
  
  // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤...
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
  async function createApplicationFromQuiz(quizSession: any, contactData: any) {
    try {
      const answers = {
        ...quizSession.answers,
        step6_contacts: contactData,
        calculated_price: calculatePrice(quizSession.answers)
      };
  
      const application = await prisma.application.create({
        data: {
          user_id: quizSession.user_id,
          answers: answers,
          status: 'new'
        },
        include: {
          user: true
        }
      });
  
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      await notifyAdminNewApplication(application.id, application.user, answers);
  
      return application;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
      throw error;
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
  function calculatePrice(answers: any): number {
    let basePrice = 0;
    let multiplier = 1;
  
    // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ —Ç–∏–ø—É —Å–∞–π—Ç–∞
    switch (answers.step1_site_type) {
      case 'business_card':
        basePrice = 15000;
        break;
      case 'shop':
        basePrice = 45000;
        break;
      case 'portfolio':
        basePrice = 25000;
        break;
      case 'blog':
// --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
bot.launch();
console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ë–î!');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
