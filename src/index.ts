// src/index.ts - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–≤–∏–∑, —Å–æ–≥–ª–∞—Å–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª

// --- –ò–º–ø–æ—Ä—Ç—ã ---
import { Telegraf, Context, Markup } from 'telegraf';
import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';

// --- –¢–∏–ø—ã ---
interface TelegramContext extends Context {
  from: NonNullable<Context['from']>;
}
type QuizAnswers = { [key: string]: any };

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
dotenv.config();
const prisma = new PrismaClient();
const botToken = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID;

if (!botToken || !CHANNEL_ID) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –∏–ª–∏ CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env!");
  process.exit(1);
}

const bot = new Telegraf<TelegramContext>(botToken);

// --- –°–¢–ê–†–¢–û–í–û–ï –ú–ï–ù–Æ ---
bot.start(async (ctx) => {
  try {
    const telegramUser = ctx.from;
    const userInDb = await prisma.user.upsert({
      where: { telegram_id: telegramUser.id },
      update: { username: telegramUser.username, first_name: telegramUser.first_name },
      create: {
        telegram_id: telegramUser.id,
        username: telegramUser.username,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name,
        language_code: telegramUser.language_code,
      },
    });

    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${userInDb.first_name}! üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'start_quiz' }],
            [{ text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã', web_app: { url: 'https://ehhechre.github.io/studio-bot-backend/webapp/' } }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    await ctx.reply('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
});



bot.action('start_quiz', (ctx) => {
  ctx.reply(
    `üìã –°–û–ì–õ–ê–°–ò–ï –ù–ê –û–ë–†–ê–ë–û–¢–ö–£ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•\n\n` +
    `–Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram ID) —Å —Ü–µ–ª—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–≤—è–∑–∏ —Å–æ –º–Ω–æ–π. –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - 3 –≥–æ–¥–∞.\n\n` +
    `–Ø –º–æ–≥—É –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /delete_data.`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'consent_agree' }],
          [{ text: '‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'consent_decline' }]
        ]
      }
    }
  );
});

bot.action('consent_decline', async (ctx) => {
  await ctx.reply(`‚ùå –ü–æ–Ω—è–ª –≤–∞—Å. –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ /start`);
});

// --- –õ–û–ì–ò–ö–ê –ö–í–ò–ó–ê ---
bot.action('consent_agree', async (ctx) => {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.quizSession.deleteMany({ where: { user_id: user.id, is_completed: false }});

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    await prisma.quizSession.create({
      data: { user_id: user.id, current_step: 1, answers: {} },
    });
    await sendQuestion1(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∫–≤–∏–∑–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /start');
  }
});

async function saveAnswerAndNext(ctx: TelegramContext, field: string, value: any, nextFunction: (ctx: TelegramContext) => Promise<void>) {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const session = await prisma.quizSession.findFirst({
      where: { user_id: user.id, is_completed: false },
      orderBy: { created_at: 'desc' },
    });
    if (!session) throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    const currentAnswers = (session.answers as QuizAnswers) || {};
    const updatedAnswers = { ...currentAnswers, [field]: value };
    await prisma.quizSession.update({
      where: { id: session.id },
      data: { answers: updatedAnswers, current_step: (session.current_step || 0) + 1 },
    });
    await nextFunction(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /start');
  }
}

// --- –í–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞ ---
async function sendQuestion1(ctx: TelegramContext) {
  await ctx.reply(`‚ùì 1/3: –ö–∞–∫–æ–π —Å–∞–π—Ç –≤–∞–º –Ω—É–∂–µ–Ω?`, { reply_markup: { inline_keyboard: [[{ text: 'üìÑ –õ–µ–Ω–¥–∏–Ω–≥', callback_data: 'q1_landing' }], [{ text: 'üõí –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'q1_shop' }]]}});
}
bot.action('q1_landing', (ctx) => saveAnswerAndNext(ctx, 'site_type', '–õ–µ–Ω–¥–∏–Ω–≥', sendQuestion2));
bot.action('q1_shop', (ctx) => saveAnswerAndNext(ctx, 'site_type', '–ú–∞–≥–∞–∑–∏–Ω', sendQuestion2));

async function sendQuestion2(ctx: TelegramContext) {
  await ctx.reply(`‚ùì 2/3: –í –∫–∞–∫–æ–π –Ω–∏—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?`, { reply_markup: { inline_keyboard: [[{ text: '‚öôÔ∏è –£—Å–ª—É–≥–∏', callback_data: 'q2_services' }], [{ text: '‚úèÔ∏è –î—Ä—É–≥–æ–µ', callback_data: 'q2_other' }]]}});
}
bot.action('q2_services', (ctx) => saveAnswerAndNext(ctx, 'niche', '–£—Å–ª—É–≥–∏', sendQuestion3));
bot.action('q2_other', (ctx) => ctx.reply('‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –Ω–∏—à—É —Ç–µ–∫—Å—Ç–æ–º:'));

async function sendQuestion3(ctx: TelegramContext) {
  await ctx.reply(`‚ùì 3/3: –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n\nüìõ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`);
}

// --- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ---
bot.on('text', async (ctx) => {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) return;
    const session = await prisma.quizSession.findFirst({
      where: { user_id: user.id, is_completed: false },
      orderBy: { created_at: 'desc' },
    });
    if (!session || !('text' in ctx.message)) return;
    const currentAnswers = (session.answers as any) || {};
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏—à–∏ –Ω–∞ —à–∞–≥–µ 2
    if (session.current_step === 2 && !currentAnswers.niche) {
      await saveAnswerAndNext(ctx, 'niche', ctx.message.text, sendQuestion3);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–∞ —à–∞–≥–µ 3
    if (session.current_step === 3 && !currentAnswers.contacts) {
      currentAnswers.contacts = { name: ctx.message.text };
      await prisma.quizSession.update({ data: { answers: currentAnswers }, where: { id: session.id } });
      await ctx.reply(
        'üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è —Å–≤—è–∑–∏:',
        Markup.keyboard([ Markup.button.contactRequest('üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º') ]).resize().oneTime()
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
  }
});
  
// --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ù–¢–ê–ö–¢–ê ---
bot.on('contact', async (ctx) => {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) return;
    
    const session = await prisma.quizSession.findFirst({
      where: { user_id: user.id, is_completed: false },
      orderBy: { created_at: 'desc' },
    });
    
    if (!session) return;
    
    const currentAnswers = (session.answers as any) || {};
    
    if (currentAnswers.contacts && !currentAnswers.contacts.phone) {
      currentAnswers.contacts.phone = ctx.message.contact.phone_number;
      
      await prisma.quizSession.update({ 
        data: { answers: currentAnswers, is_completed: true }, 
        where: { id: session.id } 
      });
      
      const application = await prisma.application.create({
        data: {
          user_id: user.id,
          status: 'new',
          answers: currentAnswers,
          contact_info: `${currentAnswers.contacts.name}, ${currentAnswers.contacts.phone}`,
        },
        include: { user: true },
      });
      
      console.log('–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
      await notifyChannelNewApplication(application);
      
      await ctx.reply(`üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.`, Markup.removeKeyboard());
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
  }
});
  
// --- –ö–û–ú–ê–ù–î–ê –£–î–ê–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• ---
bot.command('delete_data', async (ctx) => {
  try {
    const userId = ctx.from.id;
    // Prisma –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é, –ø–æ—ç—Ç–æ–º—É —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userToDelete = await prisma.user.findUnique({ where: { telegram_id: userId }});
    if (userToDelete) {
        await prisma.quizSession.deleteMany({ where: { user_id: userToDelete.id } });
        await prisma.application.deleteMany({ where: { user_id: userToDelete.id } });
        await prisma.user.delete({ where: { telegram_id: userId } });
        console.log(`–£–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        await ctx.reply(`‚úÖ –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã.`);
    } else {
        await ctx.reply(`–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }
});
// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Web App
bot.command('app', (ctx) => {
    ctx.reply('üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
      reply_markup: {
        inline_keyboard: [[
          { 
            text: 'üé® Polli Digital App', 
            web_app: { url: 'https://ehhechre.github.io/studio-bot-backend/webapp/' }
          }
        ]]
      }
    });
  });
// --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í –ö–ê–ù–ê–õ ---
async function notifyChannelNewApplication(application: any) {
  try {
    const { user, answers } = application;
    const contact = answers.contacts || {};
    const message = 
      `üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n\n` +
      `üë§ –ö–ª–∏–µ–Ω—Ç: ${user.first_name || '–ê–Ω–æ–Ω–∏–º'} (@${user.username || '?'})\n` +
      `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${contact.name}, ${contact.phone}\n\n` +
      `--- –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–≤–∏–∑ ---\n`+
      `–¢–∏–ø —Å–∞–π—Ç–∞: ${answers.site_type || '?'}\n` +
      `–ù–∏—à–∞: ${answers.niche || '?'}`;
    
    if (CHANNEL_ID) {
        await bot.telegram.sendMessage(CHANNEL_ID, message);
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    } else {
        console.error('‚ùå CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!');
    }
  } catch (error) { 
    console.error('‚ùå –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:', error); 
  }
}

// --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
bot.launch();
console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));