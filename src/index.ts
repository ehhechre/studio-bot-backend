// src/index.ts - –í–µ—Ä—Å–∏—è —Å –∫–≤–∏–∑–æ–º + –±–∞–∑–æ–≤–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

// --- –ò–º–ø–æ—Ä—Ç—ã ---
import { Telegraf, Context } from 'telegraf';
import dotenv from 'dotenv';
import { PrismaClient, Prisma } from '@prisma/client';

// --- –¢–∏–ø—ã ---
interface TelegramContext extends Context {
  from: NonNullable<Context['from']>;
}
type QuizAnswers = { [key: string]: any };

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
dotenv.config();
const prisma = new PrismaClient();
const botToken = process.env.BOT_TOKEN;
const ADMIN_TELEGRAM_ID_STRING = process.env.ADMIN_TELEGRAM_ID;

if (!botToken || !ADMIN_TELEGRAM_ID_STRING) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –∏–ª–∏ ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env!");
  process.exit(1);
}

const ADMIN_TELEGRAM_ID = parseInt(ADMIN_TELEGRAM_ID_STRING, 10);
const bot = new Telegraf<TelegramContext>(botToken);

// --- –•–µ–ª–ø–µ—Ä—ã ---
const isAdmin = (telegramId: number) => telegramId === ADMIN_TELEGRAM_ID;

// --- –°–¢–ê–†–¢–û–í–û–ï –ú–ï–ù–Æ ---
bot.start(async (ctx) => {
  try {
    const telegramUser = ctx.from;
    const userInDb = await prisma.user.upsert({
      where: { telegram_id: telegramUser.id },
      update: { username: telegramUser.username, first_name: telegramUser.first_name },
      create: {
        telegram_id: telegramUser.id,
        username: telegramUser.username,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name,
        language_code: telegramUser.language_code,
      },
    });

    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${userInDb.first_name}! üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'start_quiz' }],
            [{ text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã', callback_data: 'view_portfolio' }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    ctx.reply('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
});

// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
bot.action('view_portfolio', (ctx) => {
  ctx.reply(`üì± –ù–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: https://–≤–∞—à-—Å–∞–π—Ç.ru`, {
    reply_markup: { inline_keyboard: [[{ text: 'üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'start_quiz' }]]}
  });
});

bot.action('start_quiz', (ctx) => {
  ctx.reply(`‚öñÔ∏è –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.`, {
    reply_markup: { inline_keyboard: [[{ text: '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'consent_agree' }]]}
  });
});

// --- –õ–û–ì–ò–ö–ê –ö–í–ò–ó–ê ---
bot.action('consent_agree', async (ctx) => {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    await prisma.quizSession.create({
      data: {
        user_id: user.id,
        current_step: 1,
        answers: {},
      }
    });
    await sendQuestion1(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∫–≤–∏–∑–∞:', error);
  }
});

async function saveAnswerAndNext(ctx: TelegramContext, field: string, value: any, nextFunction: (ctx: TelegramContext) => Promise<void>) {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const session = await prisma.quizSession.findFirst({
      where: { user_id: user.id, is_completed: false },
      orderBy: { created_at: 'desc' }
    });
    if (!session) throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const currentAnswers = (session.answers as QuizAnswers) || {};
    const updatedAnswers = { ...currentAnswers, [field]: value };

    await prisma.quizSession.update({
      where: { id: session.id },
      data: {
        answers: updatedAnswers,
        current_step: (session.current_step || 0) + 1,
      }
    });
    
    await nextFunction(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
  }
}

// --- –í–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞ ---
async function sendQuestion1(ctx: TelegramContext) { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ }
bot.action('q1_landing', (ctx) => saveAnswerAndNext(ctx, 'site_type', '–õ–µ–Ω–¥–∏–Ω–≥', sendQuestion2));
// ... –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –Ω–∏–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
async function sendQuestion2(ctx: TelegramContext) { /* ... */ }
// ...
async function sendQuestion3(ctx: TelegramContext) { /* ... */ }
// ...

// –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê
bot.on('text', async (ctx) => {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) return;

    const session = await prisma.quizSession.findFirst({
      where: { user_id: user.id, is_completed: false },
      orderBy: { created_at: 'desc' }
    });
    if (!session || !('text' in ctx.message)) return;

    const currentAnswers = (session.answers as any) || {};
    
    if (session.current_step === 2 && !currentAnswers.niche) {
      await saveAnswerAndNext(ctx, 'niche', ctx.message.text, sendQuestion3);
      return;
    }

    if (session.current_step === 3) {
      if (!currentAnswers.contacts) {
        currentAnswers.contacts = { name: ctx.message.text };
        await prisma.quizSession.update({ where: { id: session.id }, data: { answers: currentAnswers }});
        await ctx.reply('üì± –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');
      } else if (!currentAnswers.contacts.phone) {
        currentAnswers.contacts.phone = ctx.message.text;
        
        await prisma.quizSession.update({ where: { id: session.id }, data: { answers: currentAnswers, is_completed: true } });
        
        const application = await prisma.application.create({
          data: {
            user_id: user.id,
            status: 'new',
            answers: currentAnswers,
            contact_info: `${currentAnswers.contacts.name}, ${currentAnswers.contacts.phone}`,
          }
        });

        console.log('–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
        
        // –í–´–ó–´–í–ê–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–£
        await notifyAdminNewApplication(application.id, user, currentAnswers);

        await ctx.reply(`üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
  }
});

// --- –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ---
bot.command('admin', async (ctx) => {
  try {
    if (!isAdmin(ctx.from.id)) return;

    await ctx.reply(`üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
          [{ text: 'üìù –ó–∞—è–≤–∫–∏', callback_data: 'admin_applications' }]
        ]
      }
    });
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–µ:', error); }
});

bot.action('admin_stats', async (ctx) => {
  try {
    if (!isAdmin(ctx.from.id)) return;

    const totalUsers = await prisma.user.count();
    const totalApplications = await prisma.application.count();
    const newApplications = await prisma.application.count({ where: { status: 'new' } });

    await ctx.editMessageText(
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
      `üìù –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${totalApplications}\n` +
      `üÜï –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: ${newApplications}`,
      { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É', callback_data: 'admin_main' }]]}}
    );
  } catch (error) { console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error); }
});

bot.action('admin_main', async (ctx) => {
    if (!isAdmin(ctx.from.id)) return;
    await ctx.editMessageText(`üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
          [{ text: 'üìù –ó–∞—è–≤–∫–∏', callback_data: 'admin_applications' }]
        ]
      }
    });
});

bot.action('admin_applications', async (ctx) => {
  try {
    if (!isAdmin(ctx.from.id)) return;

    const applications = await prisma.application.findMany({
      take: 5,
      orderBy: { created_at: 'desc' },
      include: { user: { select: { first_name: true, username: true } } }
    });

    if (applications.length === 0) {
      await ctx.editMessageText('üìù –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç', { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É', callback_data: 'admin_main' }]]}});
      return;
    }

    let message = `üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${applications.length} –∑–∞—è–≤–æ–∫:\n\n`;
    applications.forEach((app: any, index: number) => {
      const answers = app.answers as any;
      const user = app.user;
      const date = app.created_at ? new Date(app.created_at).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      message += `${index + 1}. ${user.first_name} (@${user.username || '?'})\n`;
      message += `üìÖ ${date} | üìä ${app.status}\n\n`;
    });

    await ctx.editMessageText(message, { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É', callback_data: 'admin_main' }]]}});
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error); }
});

async function notifyAdminNewApplication(applicationId: string, user: any, answers: any) {
  try {
    const contact = answers.contacts || {};
    const message = 
      `üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n\n` +
      `üë§ –ö–ª–∏–µ–Ω—Ç: ${user.first_name || '–ê–Ω–æ–Ω–∏–º'} (@${user.username || '?'})\n` +
      `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${contact.name}, ${contact.phone}\n` +
      `üè¢ –¢–∏–ø —Å–∞–π—Ç–∞: ${answers.site_type || '?'}\n` +
      `üéØ –ù–∏—à–∞: ${answers.niche || '?'}`;

    await bot.telegram.sendMessage(ADMIN_TELEGRAM_ID, message);
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error); }
}

// --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
bot.launch();
console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// P.S. –Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏–ª –∫–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –æ–Ω –ø–æ–º–µ—Å—Ç–∏–ª—Å—è. –í —Ç–≤–æ–µ–º —Ñ–∞–π–ª–µ –æ—Å—Ç–∞–≤—å –∏—Ö –∫–∞–∫ –µ—Å—Ç—å.