// src/index.ts - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ö–≤–∏–∑ + –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª

// --- –ò–º–ø–æ—Ä—Ç—ã ---
import { Telegraf, Context } from 'telegraf';
import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';

// --- –¢–∏–ø—ã ---
interface TelegramContext extends Context {
  from: NonNullable<Context['from']>;
}
type QuizAnswers = { [key: string]: any };

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
dotenv.config();
const prisma = new PrismaClient();
const botToken = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL_ID; // <-- –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–∞–Ω–∞–ª–∞

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å—Ç—å
if (!botToken || !CHANNEL_ID) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –∏–ª–∏ CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env!");
  process.exit(1);
}

const bot = new Telegraf<TelegramContext>(botToken);

// --- –°–¢–ê–†–¢–û–í–û–ï –ú–ï–ù–Æ ---
bot.start(async (ctx) => {
  try {
    const telegramUser = ctx.from;
    const userInDb = await prisma.user.upsert({
      where: { telegram_id: telegramUser.id },
      update: { username: telegramUser.username, first_name: telegramUser.first_name },
      create: {
        telegram_id: telegramUser.id,
        username: telegramUser.username,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name,
        language_code: telegramUser.language_code,
      },
    });

    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${userInDb.first_name}! üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'start_quiz' }],
            [{ text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã', callback_data: 'view_portfolio' }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    await ctx.reply('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
});

// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
bot.action('view_portfolio', (ctx) => {
  ctx.reply(`üì± –ù–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: https://–≤–∞—à-—Å–∞–π—Ç.ru`, {
    reply_markup: { inline_keyboard: [[{ text: 'üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'start_quiz' }]]}
  });
});

bot.action('start_quiz', (ctx) => {
  ctx.reply(`‚öñÔ∏è –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.`, {
    reply_markup: { inline_keyboard: [[{ text: '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data: 'consent_agree' }]]}
  });
});

// --- –õ–û–ì–ò–ö–ê –ö–í–ò–ó–ê ---
bot.action('consent_agree', async (ctx) => {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    await prisma.quizSession.create({
      data: { user_id: user.id, current_step: 1, answers: {} },
    });
    await sendQuestion1(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∫–≤–∏–∑–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /start');
  }
});

async function saveAnswerAndNext(ctx: TelegramContext, field: string, value: any, nextFunction: (ctx: TelegramContext) => Promise<void>) {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const session = await prisma.quizSession.findFirst({
      where: { user_id: user.id, is_completed: false },
      orderBy: { created_at: 'desc' },
    });
    if (!session) throw new Error('–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    const currentAnswers = (session.answers as QuizAnswers) || {};
    const updatedAnswers = { ...currentAnswers, [field]: value };
    await prisma.quizSession.update({
      where: { id: session.id },
      data: { answers: updatedAnswers, current_step: (session.current_step || 0) + 1 },
    });
    await nextFunction(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /start');
  }
}

// --- –í–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞ ---
async function sendQuestion1(ctx: TelegramContext) {
  await ctx.reply(`‚ùì 1/3: –ö–∞–∫–æ–π —Å–∞–π—Ç –≤–∞–º –Ω—É–∂–µ–Ω?`, { reply_markup: { inline_keyboard: [[{ text: 'üìÑ –õ–µ–Ω–¥–∏–Ω–≥', callback_data: 'q1_landing' }], [{ text: 'üõí –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'q1_shop' }]]}});
}
bot.action('q1_landing', (ctx) => saveAnswerAndNext(ctx, 'site_type', '–õ–µ–Ω–¥–∏–Ω–≥', sendQuestion2));
bot.action('q1_shop', (ctx) => saveAnswerAndNext(ctx, 'site_type', '–ú–∞–≥–∞–∑–∏–Ω', sendQuestion2));

async function sendQuestion2(ctx: TelegramContext) {
  await ctx.reply(`‚ùì 2/3: –í –∫–∞–∫–æ–π –Ω–∏—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?`, { reply_markup: { inline_keyboard: [[{ text: '‚öôÔ∏è –£—Å–ª—É–≥–∏', callback_data: 'q2_services' }], [{ text: '‚úèÔ∏è –î—Ä—É–≥–æ–µ', callback_data: 'q2_other' }]]}});
}
bot.action('q2_services', (ctx) => saveAnswerAndNext(ctx, 'niche', '–£—Å–ª—É–≥–∏', sendQuestion3));
bot.action('q2_other', (ctx) => ctx.reply('‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –Ω–∏—à—É —Ç–µ–∫—Å—Ç–æ–º:'));

async function sendQuestion3(ctx: TelegramContext) {
  await ctx.reply(`‚ùì 3/3: –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n\nüìõ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`);
}

// --- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ---
bot.on('text', async (ctx) => {
  try {
    const user = await prisma.user.findUnique({ where: { telegram_id: ctx.from.id } });
    if (!user) return;
    const session = await prisma.quizSession.findFirst({
      where: { user_id: user.id, is_completed: false },
      orderBy: { created_at: 'desc' },
    });
    if (!session || !('text' in ctx.message)) return;
    const currentAnswers = (session.answers as any) || {};
    if (session.current_step === 2 && !currentAnswers.niche) {
      await saveAnswerAndNext(ctx, 'niche', ctx.message.text, sendQuestion3);
      return;
    }
    if (session.current_step === 3) {
      if (!currentAnswers.contacts) {
        currentAnswers.contacts = { name: ctx.message.text };
        await prisma.quizSession.update({ data: { answers: currentAnswers }, where: { id: session.id } });
        await ctx.reply('üì± –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');
      } else if (!currentAnswers.contacts.phone) {
        currentAnswers.contacts.phone = ctx.message.text;
        await prisma.quizSession.update({ data: { answers: currentAnswers, is_completed: true }, where: { id: session.id } });
        const application = await prisma.application.create({
          data: {
            user_id: user.id,
            status: 'new',
            answers: currentAnswers,
            contact_info: `${currentAnswers.contacts.name}, ${currentAnswers.contacts.phone}`,
          },
          include: { user: true },
        });
        console.log('–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
        await notifyChannelNewApplication(application); // <-- –ó–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await ctx.reply(`üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.`);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
  }
});

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª ---
async function notifyChannelNewApplication(application: any) {
    try {
      console.log('=== –ù–ê–ß–ê–õ–û –û–¢–ü–†–ê–í–ö–ò –í –ö–ê–ù–ê–õ ===');
      console.log('CHANNEL_ID:', process.env.CHANNEL_ID);
      console.log('–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:', application);
      
      const { user, answers } = application;
      const contact = answers.contacts || {};
      const message = 
        `üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${user.first_name || '–ê–Ω–æ–Ω–∏–º'} (@${user.username || '?'})\n` +
        `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${contact.name}, ${contact.phone}\n` +
        `\n--- –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–≤–∏–∑ ---\n`+
        `–¢–∏–ø —Å–∞–π—Ç–∞: ${answers.site_type || '?'}\n` +
        `–ù–∏—à–∞: ${answers.niche || '?'}`;
      
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', message);
      
      if (CHANNEL_ID) {
          console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª...');
          const result = await bot.telegram.sendMessage(CHANNEL_ID, message);
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', result);
      } else {
          console.error('‚ùå CHANNEL_ID –ø—É—Å—Ç–æ–π!');
      }
    } catch (error) { 
      console.error('‚ùå –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª:', error); 
    }
  }

// --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
bot.launch();
console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));